from typing import Any, Tuple, Dict

class CategoryObject:
    def __init__(self, category: Any = None, base: Any = None) -> None: ...
    def __cinit__(self) -> None: ...
    def _init_category_(self, category: Any) -> None: ...
    def _refine_category_(self, category: Any) -> None: ...
    def _is_category_initialized(self) -> bool: ...
    def category(self) -> Any: ...
    def categories(self) -> Any: ...
    def _underlying_class(self) -> Any: ...
    def __gens_dict(self) -> Dict[str, Any]: ...
    def gens_dict(self, copy: bool = True) -> Dict[str, Any]: ...
    def gens_dict_recursive(self) -> Dict[str, Any]: ...
    def objgens(self) -> Tuple[Any, Any]: ...
    def objgen(self) -> Tuple[Any, Any]: ...
    def _first_ngens(self, n: int) -> Any: ...
    def _defining_names(self) -> Any: ...
    def _assign_names(self, names: Any = None, normalize: bool = True, ngens: int = None) -> None: ...
    def variable_names(self) -> Tuple[str, ...]: ...
    def variable_name(self) -> str: ...
    def _temporarily_change_names(self, names: Any, latex_names: Any) -> Any: ...
    def inject_variables(self, scope: Any = None, verbose: bool = True) -> None: ...
    def base_ring(self) -> Any: ...
    def base(self) -> Any: ...
    def Hom(self, codomain: Any, cat: Any = None) -> Any: ...
    def latex_variable_names(self) -> Any: ...
    def latex_name(self) -> str: ...
    def __getstate__(self) -> Dict[str, Any]: ...
    def __setstate__(self, d: Dict[str, Any]) -> None: ...
    def __hash__(self) -> int: ...
    def __getattr__(self, name: str) -> Any: ...
    def getattr_from_category(self, name: str) -> Any: ...
    def __dir__(self) -> Any: ...

def normalize_names(ngens: int, names: Any) -> Tuple[str, ...]: ...

def certify_names(names: Any) -> bool: ...
