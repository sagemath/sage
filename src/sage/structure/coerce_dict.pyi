from typing import Any, Optional, Tuple, Dict, List

class MonoDict:
    def __init__(self, data: Optional[Any] = None, *, weak_values: bool = False) -> None: ...
    def __len__(self) -> int: ...
    def __contains__(self, k: Any) -> bool: ...
    def __getitem__(self, k: Any) -> Any: ...
    def __setitem__(self, k: Any, value: Any) -> None: ...
    def __delitem__(self, k: Any) -> None: ...
    def items(self) -> List[Tuple[Any, Any]]: ...
    def copy(self) -> Dict[Any, Any]: ...
    def __reduce__(self) -> Any: ...

class TripleDict:
    def __init__(self, data: Optional[Any] = None, *, weak_values: bool = False) -> None: ...
    def __len__(self) -> int: ...
    def __contains__(self, k: Tuple[Any, Any, Any]) -> bool: ...
    def __getitem__(self, k: Tuple[Any, Any, Any]) -> Any: ...
    def __setitem__(self, k: Tuple[Any, Any, Any], value: Any) -> None: ...
    def __delitem__(self, k: Tuple[Any, Any, Any]) -> None: ...
    def items(self) -> List[Tuple[Tuple[Any, Any, Any], Any]]: ...
    def copy(self) -> Dict[Tuple[Any, Any, Any], Any]: ...
    def __reduce__(self) -> Any: ...
