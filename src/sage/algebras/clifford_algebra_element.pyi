from typing import Any

class CliffordAlgebraElement:
    def _repr_(self) -> str: ...
    def _latex_(self) -> str: ...
    def _mul_(self, other: CliffordAlgebraElement) -> CliffordAlgebraElement: ...
    def _mul_self_term(self, supp: Any, coeff: Any) -> CliffordAlgebraElement: ...
    def _mul_term_self(self, supp: Any, coeff: Any) -> CliffordAlgebraElement: ...
    def list(self) -> list[tuple[Any, Any]]: ...
    def support(self) -> list[Any]: ...
    def reflection(self) -> CliffordAlgebraElement: ...
    degree_negation = reflection
    def transpose(self) -> CliffordAlgebraElement: ...
    def conjugate(self) -> CliffordAlgebraElement: ...
    clifford_conjugate = conjugate

class ExteriorAlgebraElement(CliffordAlgebraElement):
    def _mul_(self, other: ExteriorAlgebraElement) -> ExteriorAlgebraElement: ...
    def _mul_self_term(self, supp: Any, coeff: Any) -> ExteriorAlgebraElement: ...
    def _mul_term_self(self, supp: Any, coeff: Any) -> ExteriorAlgebraElement: ...
    def reduce(self, I: Any, left: bool = True) -> ExteriorAlgebraElement: ...
    def interior_product(self, x: Any) -> ExteriorAlgebraElement: ...
    antiderivation = interior_product
    def hodge_dual(self) -> ExteriorAlgebraElement: ...
    def constant_coefficient(self) -> Any: ...
    def scalar(self, other: ExteriorAlgebraElement) -> Any: ...

class CohomologyRAAGElement(CliffordAlgebraElement):
    def _mul_(self, other: CohomologyRAAGElement) -> CohomologyRAAGElement: ...
