from collections.abc import Callable
from typing import Any
from sage.structure.element import Element
from sage.structure.parent import Parent

class SymbolicRing(Parent):
    def __init__(self, base_ring: Any = None) -> None:
        ...

    def __reduce__(self) -> tuple:
        ...

    def _repr_(self) -> str:
        ...

    def _latex_(self) -> str:
        ...

    def _coerce_map_from_(self, R: Any) -> bool:
        ...

    def _element_constructor_(self, x: Any) -> Element:
        ...

    def _force_pyobject(self, x: Any, force: bool = False, recursive: bool = True) -> Element:
        ...

    def wild(self, n: int = 0) -> Element:
        ...

    def __contains__(self, x: Any) -> bool:
        ...

    def characteristic(self) -> int:
        ...

    def _an_element_(self) -> Element:
        ...

    def is_field(self, proof: bool = True) -> bool:
        ...

    def is_finite(self) -> bool:
        ...

    def is_exact(self) -> bool:
        ...

    def pi(self) -> Element:
        ...

    def I(self) -> Element:
        ...

    def symbol(self, name: str | None = None, latex_name: str | None = None, domain: str | None = None) -> Element:
        ...

    def temp_var(self, n: int | None = None, domain: str | None = None) -> Element | tuple[Element, ...]:
        ...

    def cleanup_var(self, symbol: Element | list[Element]) -> None:
        ...

    def var(self, name: str, latex_name: str | None = None, n: int | None = None, domain: str | None = None) -> Element | tuple[Element, ...]:
        ...

    def _repr_element_(self, x: Element) -> str:
        ...

    def _latex_element_(self, x: Element) -> str:
        ...

    def _call_element_(self, _the_element: Element, *args: Any, **kwds: Any) -> Element:
        ...

    def subring(self, *args: Any, **kwds: Any) -> Parent:
        ...

    def _fricas_init_(self) -> str:
        ...

def the_SymbolicRing() -> SymbolicRing:
    ...

class NumpyToSRMorphism:
    def __init__(self, numpy_type: Any) -> None:
        ...

    def _call_(self, a: Any) -> Element:
        ...

class UnderscoreSageMorphism:
    def __init__(self, t: Any, R: Any) -> None:
        ...

    def _call_(self, a: Any) -> Element:
        ...

def var(name: str, **kwds: Any) -> Element | tuple[Element, ...]:
    ...

def isidentifier(x: str) -> bool:
    ...

class TemporaryVariables(tuple):
    def __enter__(self) -> TemporaryVariables:
        ...

    def __exit__(self, *args: Any) -> bool:
        ...
