---------------------------------------------------------------------

A comment from Mark Watkins:

William Stein wrote:
> Mark (cc: sage-devel)
> Do you have any comments on the remarks below about sympow?
> In particular, "Otherwise, sympow would be useless on
> anything not linux and not x86."   Given that you only use x86,
> and are perhaps the main user of sympow... ?

SYMPOW doesn't use extended precision --- exactly the opposite, it must
turn them off if there are on! I thought that SAGE contained something
else with Bailey's quad-doubles, for which there is the same problem
(hacking asm-type code to bit-twiddle the FPU settings). SYMPOW should
work fine on any system that uses 53-bit doubles. On other systems,
it will still work for computations less than 16 or so digits (though
the current version might die on start-up).

NOTES:

1. getline conflicts with a system-wide function name on
Cygwin.  So I changed it to getline0 in a whole bunch
of Mark's files.


2.
Modified Configure by changing line 66 to the following:
  if [ "$MACH" = "$x" -a `uname` = "Linux" ];


From: Mark Watkins <watkins@maths.usyd.edu.au>
Subject: Re: sympow
To: wstein@gmail.com (William Stein)
Date: Mon, 8 May 2006 22:01:40 +1000 (EST)

William Stein wrote:
> I compiled it on my OS X machine without the fpu_control
> business, and started up without any special options
> (in particular, without -noqdcheck).  Still sympow seems
> to work fine.

This seems right. Linux puts the FPU into extended precision
(64-bit mantissa), while all other OSs put it into normal double
precision --- so unless you run a programme that resets it,
you should get the desired precision.

-------------------------------------------------------------


Note from Mark Watkins:


From: Mark Watkins <watkins@maths.usyd.edu.au>
Subject: ec/sympow speed
To: wstein@ucsd.edu (William Stein)
Date: Mon, 27 Mar 2006 14:02:26 +1100 (EST)

One main difference between ec and sympow for moddeg is that the
former guesses that fewer terms will be needed to find the modular
degree, and thus the Euler product need not be expanded as
far. Changing this would make sympow about as fast, though ec is still
maybe 5% faster.


-------------


From: Mark Watkins <watkins@maths.usyd.edu.au>
Subject: sympow moddeg
To: wstein@ucsd.edu (William Stein)
Date: Fri, 21 Apr 2006 17:01:10 +1000 (EST)


I currently have sympow's moddeg about 10% faster than ec it seems.
I will test it more thoroughly, and consider adding a "proof" option
(assuming c=1, etc.).

