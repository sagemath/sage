#!/bin/sh

python_files=$(git diff --staged --name-only | grep "\.py$")
cython_files=$(git diff --staged --name-only | grep "\.pyx$\|\.pxd$\|\.pxi$")
c_files=$(git diff --staged --name-only | grep "\.c$\|\.cpp$\|\.h$")
[ -z "$python_files" ] && [ -z "$cython_files" ] && [ -z "$c_files" ] && exit 0

# Text formatting
RED='\e[1;31m'
BLUE='\e[1;34m'
YLLW='\e[1;33m'
NRM='\e[0m'  # normal

if ([ -n "$python_files" ] || [ -n "$cython_files" ]) && ! command -v autopep8 > /dev/null; then
  printf "${RED}Error${NRM}: ${BLUE}auto${YLLW}pep8${NRM} not found; required for pre-commit checks.\n\
To avoid these pre-commit checks, use 'git commit --no-verify'.\n"
  exit 1
fi

if [ -n "$c_files" ] && ! command -v clang-format > /dev/null; then
  printf "${RED}Error${NRM}: ${BLUE}clang-format${NRM} not found; required for pre-commit checks.\n\
To avoid these pre-commit checks, use 'git commit --no-verify'.\n"
  exit 1
fi

# Set formatter flags
autopep8_flags="-j0 --exit-code"
clang_format_flags="--Werror"
if [ "$1" == "in-place" ]; then
  autopep8_flags="--in-place $autopep8_flags"
  clang_format_flags="-i $clang_format_flags"
else
  autopep8_flags="--diff $autopep8_flags"
  clang_format_flags="--dry-run $clang_format_flags"
fi

# Set PEP8 issues to fix (autopep8 by default ignores E226,E24,W50,W690).
# We also ignore E203 to avoid the enforcing of questionable formatting of
# slices (e.g., [start: end: step]).
# For Python files we include E226 to add whitespace around operator (e.g., 2*3).
# For Cython files we are less aggressive in order to avoid adding whitespace
# around pointers (e.g., `cdef int *array`) and casting syntax (e.g., `<int *>`).
python_flags="--ignore=E203,E24,W50,W690"
cython_flags="--ignore=E203,E211,E225,E226,E227,E228,E24,W50,W690"

changes=false
if ! [ "$1" == "in-place" ]; then  # Check only
  if [ -n "$python_files" ] || [ -n "$cython_files" ]; then
    printf "${BLUE}auto${YLLW}pep8${NRM}: Checking code formatting..."
    if [ -n "$python_files" ] && ! autopep8 $autopep8_flags $python_flags $python_files > /dev/null; then
      changes=true
      printf " failure.\n"
    elif [ -n "$cython_files" ] && ! autopep8 $autopep8_flags $cython_flags $cython_files > /dev/null; then
      changes=true
      printf " failure.\n"
    else
      printf " success.\n"
    fi
  fi
  if [ -n "$c_files" ]; then
    printf "${BLUE}clang-format${NRM}: Checking code formatting..."
    if ! clang-format $clang_format_flags $c_files 2> /dev/null; then
      changes=true
      printf " failure.\n"
    else
      printf " success.\n"
    fi
  fi
  if $changes; then
    printf "${RED}Error${NRM}: Ill-formatted files staged for commit.\n\
Format them manually or use 'git hook run pre-commit -- in-place'.\n\
To avoid these pre-commit checks, use 'git commit --no-verify'.\n"
    exit 1
  fi
else  # Format in-place
  if [ -n "$python_files" ] || [ -n "$cython_files" ]; then
    printf "${BLUE}auto${YLLW}pep8${NRM}: Auto-formatting..."
    [ -n "$python_files" ] && ! autopep8 $autopep8_flags $python_flags $python_files && changes=true
    [ -n "$cython_files" ] && ! autopep8 $autopep8_flags $cython_flags $cython_files && changes=true
    if $changes; then
      printf " check the unstaged changes.\n"
    else
      printf " no changes required.\n"
    fi
  fi
  if [ -n "$c_files" ]; then
    printf "${BLUE}clang-format${NRM}: Auto-formatting..."
    if ! clang-format --dry-run --Werror $c_files 2> /dev/null; then
      changes=true
      clang-format $clang_format_flags $c_files
      printf " check the unstaged changes.\n"
    else
      printf " no changes required.\n"
    fi
  fi
fi
